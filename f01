*&---------------------------------------------------------------------*
*& Include          ZIN_CMX_WORKORDER_F01
*&---------------------------------------------------------------------*

*---------------------------------------------------------------------*
* Fetch candidate orders
*---------------------------------------------------------------------*
FORM f_get_orders.
  SELECT SINGLE atinn INTO gv_atinn
    FROM cabn
   WHERE atnam = 'INTERFACE'.
  IF sy-subrc <> 0.
    MESSAGE 'Characteristic INTERFACE not found' TYPE 'E'.
  ENDIF.

  SELECT * FROM viaufkst
    INTO TABLE gt_orders
   WHERE auart = 'YA07'                  "force YA07
     AND auart IN so_auart
     AND iwerk IN so_werks
     AND aufnr IN so_aufnr
     AND equnr IN so_equnr
     AND tplnr IN so_floc.
ENDFORM.

*---------------------------------------------------------------------*
* Check order statuses and eligibility
*---------------------------------------------------------------------*
FORM f_check_status USING ps_order TYPE viaufkst.

  DATA: lv_obj   TYPE cuobj,
        lv_value TYPE atwrt,
        lv_stat  TYPE jest-stat,
        lv_date  TYPE udate,
        lv_time  TYPE utime,
        lv_objid TYPE c LENGTH 20,
        lv_vornr TYPE vornr.

  "Classification object
  IF ps_order-equnr IS NOT INITIAL.
    SELECT SINGLE cuobj INTO lv_obj FROM inob WHERE objek = ps_order-equnr.
  ELSE.
    SELECT SINGLE cuobj INTO lv_obj FROM inob WHERE objek = ps_order-tplnr.
  ENDIF.
  IF lv_obj IS INITIAL. RETURN. ENDIF.

  "INTERFACE=CMX?
  SELECT SINGLE atwrt INTO lv_value FROM ausp
   WHERE objek = lv_obj AND atinn = gv_atinn.
  IF sy-subrc <> 0 OR lv_value <> 'CMX'. RETURN. ENDIF.

  "Status check
  SELECT SINGLE stat INTO lv_stat FROM jest
   WHERE objnr = ps_order-objnr
     AND stat IN (c_stat_rel, c_stat_teco, c_stat_lkd)
     AND inact = ''.
  IF sy-subrc <> 0. RETURN. ENDIF.

  "Skip if CMXC
  SELECT SINGLE stat FROM jest
   WHERE objnr = ps_order-objnr
     AND stat = c_stat_cmxc
     AND inact = ''.
  IF sy-subrc = 0. RETURN. ENDIF.

  "Change check
  CONCATENATE sy-mandt '30' ps_order-aufnr INTO lv_objid.
  SELECT MAX( udate ) MAX( utime )
    INTO (lv_date, lv_time)
    FROM cdhdr
   WHERE objectclas = 'ORDER'
     AND objectid    = lv_objid.

  IF ( lv_date < so_date-low OR
       ( lv_date = so_date-low AND lv_time < so_time-low ) ).
    SELECT SINGLE stat FROM jest
     WHERE objnr = ps_order-objnr
       AND stat = c_stat_cmxs
       AND inact = ''.
    IF sy-subrc = 0. RETURN. ENDIF.
  ENDIF.

  "Get operation
  PERFORM f_get_operation USING ps_order CHANGING lv_vornr.

  PERFORM f_prepare_output USING ps_order lv_vornr lv_stat.

ENDFORM.

*---------------------------------------------------------------------*
* Get first operation
*---------------------------------------------------------------------*
FORM f_get_operation USING ps_order TYPE viaufkst
                     CHANGING pv_vornr TYPE afvc-vornr.

  CLEAR pv_vornr.
  SELECT vornr, objnr FROM afvc
    WHERE aufpl = ps_order-aufpl
    ORDER BY aplzl
    INTO (pv_vornr, @DATA(lv_objnr))
    UP TO 1 ROWS.
  ENDSELECT.

  IF sy-subrc = 0.
    SELECT SINGLE stat FROM jest
     WHERE objnr = lv_objnr
       AND stat = 'I0013'
       AND inact = ''.
    IF sy-subrc = 0. CLEAR pv_vornr. ENDIF.
  ENDIF.

ENDFORM.

*---------------------------------------------------------------------*
* Prepare output
*---------------------------------------------------------------------*
FORM f_prepare_output USING ps_order TYPE viaufkst
                            pv_vornr TYPE vornr
                            pv_stat  TYPE jest-stat.

  CLEAR gs_output.
  gs_output-order_msg_status = 'CREATE'.
  gs_output-werks   = ps_order-iwerk.
  gs_output-aufnr   = ps_order-aufnr.
  gs_output-vornr   = pv_vornr.
  gs_output-gstrp   = ps_order-gstrp.
  gs_output-gltrp   = ps_order-gltrp.
  gs_output-lacdate = ps_order-lacd_date.
  gs_output-sysid   = sy-sysid.

  SELECT SINGLE txt04 INTO gs_output-stat_txt
    FROM tj02t
   WHERE istat = pv_stat
     AND spras = sy-langu.

  IF ps_order-equnr IS NOT INITIAL.
    gs_output-obj_txt = ps_order-equnr.
  ELSE.
    gs_output-obj_txt = ps_order-tplnr.
  ENDIF.

  APPEND gs_output TO gt_output.

ENDFORM.

*---------------------------------------------------------------------*
* Update SAP status
*---------------------------------------------------------------------*
FORM f_send_cmx.
  LOOP AT gt_output INTO gs_output.
    DATA: lt_header TYPE TABLE OF bapi_alm_order_headers_i,
          lt_status TYPE TABLE OF bapi_alm_order_usrstat,
          ls_header TYPE bapi_alm_order_headers_i,
          ls_status TYPE bapi_alm_order_usrstat,
          lt_return TYPE TABLE OF bapiret2,
          ls_return TYPE bapiret2.

    ls_header-orderid = gs_output-aufnr.
    APPEND ls_header TO lt_header.

    ls_status-user_st_text = 'CMXS'.
    ls_status-langu        = 'EN'.
    ls_status-langu_iso    = 'E'.
    APPEND ls_status TO lt_status.

    CALL FUNCTION 'BAPI_ALM_ORDER_MAINTAIN'
      TABLES
        it_header     = lt_header
        it_userstatus = lt_status
        return        = lt_return.

    READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
    IF sy-subrc = 0.
      gs_output-msg = ls_return-message.
      MODIFY gt_output FROM gs_output.
    ENDIF.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING wait = 'X'.
  ENDLOOP.
ENDFORM.

*---------------------------------------------------------------------*
* Display ALV (SALV)
*---------------------------------------------------------------------*
FORM f_display.
  TRY .
      cl_salv_table=>factory(
        IMPORTING r_salv_table = DATA(lo_salv)
        CHANGING  t_table      = gt_output ).
      lo_salv->get_columns( )->set_optimize( ).
      lo_salv->get_functions( )->set_all( ).
      lo_salv->display( ).
    CATCH cx_salv_msg.
  ENDTRY.
ENDFORM.

*---------------------------------------------------------------------*
* Send JSON payload to CPI
*---------------------------------------------------------------------*
FORM f_send_to_cpi.
  DATA: lv_payload TYPE string,
        lv_content TYPE string VALUE 'application/json',
        lv_rfc     TYPE rfcdest VALUE 'CMX_WorkOrder',
        lv_status  TYPE string.

  TRY.
      lv_payload = xco_ku_json=>data->from_abap( gt_output )->apply( VALUE #(
                       ( xco_ku_json=>transformation->underscore_to_pascal_case )
                   ) )->to_string( ).
    CATCH cx_sxml_error INTO DATA(lx_error).
      RETURN.
  ENDTRY.

  cl_http_client=>create_by_destination(
    EXPORTING destination = lv_rfc
    IMPORTING client      = DATA(lo_http_client)
    EXCEPTIONS OTHERS     = 1 ).
  IF sy-subrc <> 0. RETURN. ENDIF.

  lo_http_client->request->set_header_field(
    name  = '~request_method' value = 'POST' ).
  lo_http_client->request->set_header_field(
    name  = 'Content-Type' value = lv_content ).
  lo_http_client->request->set_cdata( lv_payload ).

  lo_http_client->send( ).
  lo_http_client->receive( ).
  lo_http_client->response->get_status( IMPORTING code = lv_status ).

  IF lv_status <> '200'.
    gs_output-msg = |CPI error: { lv_status }|.
    MODIFY gt_output FROM gs_output.
  ENDIF.

ENDFORM.