Hereâ€™s my code but when i test the sm59 it shown 500

*&---------------------------------------------------------------------*
*& Include          ZIN_CMX_WORKORDER_F01
*&---------------------------------------------------------------------*

*---------------------------------------------------------------------*
* Fetch candidate orders
*---------------------------------------------------------------------*
FORM f_get_orders.
  SELECT SINGLE atinn INTO gv_atinn
    FROM cabn
   WHERE atnam = 'INTERFACE'.
  IF sy-subrc <> 0.
    MESSAGE 'Characteristic INTERFACE not found' TYPE 'E'.
  ENDIF.

  SELECT * FROM viaufkst
    INTO TABLE gt_orders
   WHERE auart = 'YA07'                  "force YA07
     AND auart IN so_auart
     AND iwerk IN so_werks
     AND aufnr IN so_aufnr
     AND equnr IN so_equnr
     AND tplnr IN so_floc.
ENDFORM.

*---------------------------------------------------------------------*
* Check order statuses and eligibility
*---------------------------------------------------------------------*
FORM f_check_status USING ps_order TYPE viaufkst.

  DATA: lv_obj   TYPE cuobj,
        lv_value TYPE atwrt,
        lv_stat  TYPE jest-stat,
        lv_date  TYPE udate,
        lv_time  TYPE utime,
        lv_objid TYPE c LENGTH 20,
        lv_vornr TYPE vornr.

  "Classification object
  IF ps_order-equnr IS NOT INITIAL.
    SELECT SINGLE cuobj INTO lv_obj FROM inob WHERE objek = ps_order-equnr.
  ELSE.
    SELECT SINGLE cuobj INTO lv_obj FROM inob WHERE objek = ps_order-tplnr.
  ENDIF.
  IF lv_obj IS INITIAL. RETURN. ENDIF.

  "INTERFACE=CMX?
  SELECT SINGLE atwrt INTO lv_value FROM ausp
   WHERE objek = lv_obj AND atinn = gv_atinn.
  IF sy-subrc <> 0 OR lv_value <> 'CMX'. RETURN. ENDIF.

  "Status check
  SELECT SINGLE stat INTO lv_stat FROM jest
   WHERE objnr = ps_order-objnr
     AND stat IN (c_stat_rel, c_stat_teco, c_stat_lkd)
     AND inact = ''.
  IF sy-subrc <> 0. RETURN. ENDIF.

  "Skip if CMXC
  SELECT SINGLE stat
    INTO lv_stat
    FROM jest
   WHERE objnr = ps_order-objnr
     AND stat = c_stat_cmxc
     AND inact = ''.
  IF sy-subrc = 0. RETURN. ENDIF.

  "Change check
  CONCATENATE sy-mandt '30' ps_order-aufnr INTO lv_objid.
  SELECT MAX( udate ) MAX( utime )
    INTO (lv_date, lv_time)
    FROM cdhdr
   WHERE objectclas = 'ORDER'
     AND objectid    = lv_objid.

  IF ( lv_date < so_date-low OR
       ( lv_date = so_date-low AND lv_time < so_time-low ) ).
    SELECT SINGLE stat
      INTO @lv_stat
      FROM jest
     WHERE objnr = @ps_order-objnr
       AND stat = @c_stat_cmxs
       AND inact = ''.
    IF sy-subrc = 0. RETURN. ENDIF.
  ENDIF.

  "Get operation
  PERFORM f_get_operation USING ps_order CHANGING lv_vornr.

  PERFORM f_prepare_output USING ps_order lv_vornr lv_stat.

ENDFORM.

*---------------------------------------------------------------------*
* Get first operation
*---------------------------------------------------------------------*
FORM f_get_operation USING ps_order TYPE viaufkst
                     CHANGING pv_vornr TYPE afvc-vornr.

  SELECT vornr, aufpl, aplzl, objnr
    FROM afvc
    WHERE aufpl = @ps_order-aufpl
    ORDER BY aplzl
    INTO @DATA(ls_afvc)
    UP TO 1 ROWS.
  ENDSELECT.

  IF sy-subrc = 0.
    pv_vornr = ls_afvc-vornr.
  ENDIF.

  "Skip deleted ops
  IF sy-subrc = 0 AND ls_afvc-objnr IS NOT INITIAL.
    SELECT SINGLE stat
      INTO @DATA(lv_stat)
      FROM jest
      WHERE objnr = @ls_afvc-objnr
      AND stat = 'I0013'
      AND inact = ''.

    IF sy-subrc = 0.
      CLEAR pv_vornr.
    ENDIF.
  ENDIF.
ENDFORM.

*---------------------------------------------------------------------*
* Prepare output
*---------------------------------------------------------------------*
FORM f_prepare_output USING ps_order TYPE viaufkst
                            pv_vornr TYPE vornr
                            pv_stat  TYPE jest-stat.

  CLEAR gs_output.
  gs_output-order_msg_status = 'CREATE'.
  gs_output-werks   = ps_order-iwerk.
  gs_output-aufnr   = ps_order-aufnr.
  gs_output-vornr   = pv_vornr.
  gs_output-gstrp   = ps_order-gstrp.
  gs_output-gltrp   = ps_order-gltrp.
  gs_output-lacdate = ps_order-lacd_date.
  gs_output-system_id = sy-sysid.

  SELECT SINGLE txt04 INTO gs_output-stat_txt
    FROM tj02t
   WHERE istat = pv_stat
     AND spras = sy-langu.

  IF ps_order-equnr IS NOT INITIAL.
    gs_output-obj_txt = ps_order-equnr.
  ELSE.
    gs_output-obj_txt = ps_order-tplnr.
  ENDIF.

  APPEND gs_output TO gt_output.

ENDFORM.

*---------------------------------------------------------------------*
* Update SAP status (now using work area, not field-symbols)
*---------------------------------------------------------------------*
FORM f_send_cmx.
  DATA ls_output LIKE LINE OF gt_output.

  LOOP AT gt_output ASSIGNING FIELD-SYMBOL(<ls_output_row>).
    DATA: lt_header  TYPE TABLE OF bapi_alm_order_headers_i,
          lt_status  TYPE TABLE OF bapi_alm_order_usrstat,
          lt_methods TYPE TABLE OF bapi_alm_order_method,
          ls_header  TYPE bapi_alm_order_headers_i,
          ls_status  TYPE bapi_alm_order_usrstat,
          ls_method  TYPE bapi_alm_order_method,
          lt_return  TYPE TABLE OF bapiret2,
          ls_return  TYPE bapiret2.

    CLEAR: lt_header, lt_status, lt_methods, lt_return.

    " Header
    ls_header-orderid = <ls_output_row>-aufnr.
    APPEND ls_header TO lt_header.

    " User status
    ls_status-user_st_text = 'CMXS'.
    ls_status-langu        = 'EN'.
    ls_status-langu_iso    = 'E'.
    APPEND ls_status TO lt_status.

    " Method for user status
    ls_method-refnumber = '000001'.
    ls_method-objecttype = 'HEADER'.
    ls_method-method     = 'USERSTATUS'.
    ls_method-objectkey  = <ls_output_row>-aufnr.
    APPEND ls_method TO lt_methods.

    " Call BAPI
    CALL FUNCTION 'BAPI_ALM_ORDER_MAINTAIN'
      TABLES
        it_header     = lt_header
        it_methods    = lt_methods
        it_userstatus = lt_status
        return        = lt_return
      EXCEPTIONS
        OTHERS        = 1.

    IF sy-subrc <> 0.
      <ls_output_row>-msg = |BAPI call failed (SY-SUBRC={ sy-subrc })|.
    ELSE.
      " Check messages
      READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
      IF sy-subrc = 0.
        <ls_output_row>-msg = ls_return-message.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      ELSE.
        <ls_output_row>-msg = 'CMXS status updated successfully'.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING wait = 'X'.
      ENDIF.
    ENDIF.

    " Always log
    PERFORM f_write_log USING <ls_output_row>-aufnr
                               <ls_output_row>-vornr
                               <ls_output_row>-werks
                               'CMXS'
                               <ls_output_row>-msg.

  ENDLOOP.

  COMMIT WORK.
ENDFORM.

*---------------------------------------------------------------------*
* Display ALV (SALV)
*---------------------------------------------------------------------*
FORM f_display.
  TRY .
      cl_salv_table=>factory(
        IMPORTING r_salv_table = DATA(lo_salv)
        CHANGING  t_table      = gt_output ).
      lo_salv->get_columns( )->set_optimize( ).
      lo_salv->get_functions( )->set_all( ).
      lo_salv->display( ).
    CATCH cx_salv_msg.
  ENDTRY.
ENDFORM.

*---------------------------------------------------------------------*
* Send JSON payload to CPI (using work area instead of field-symbol)
*---------------------------------------------------------------------*
FORM f_send_to_cpi.
  DATA: lv_payload    TYPE string,
        lv_content    TYPE string VALUE 'application/json',
        lv_rfc        TYPE rfcdest VALUE 'CMX_WorkOrder',
        lv_status     TYPE i,
        lv_status_c   TYPE char10,
        lv_response   TYPE string.

  " Build JSON payload
  TRY.
      lv_payload = xco_ku_json=>data->from_abap( gt_output )->to_string( ).
    CATCH cx_sxml_error INTO DATA(lx_error).
      LOOP AT gt_output ASSIGNING FIELD-SYMBOL(<ls_output_row>).
        <ls_output_row>-msg = |JSON build failed: { lx_error->get_text( ) }|.
        PERFORM f_write_log USING <ls_output_row>-aufnr
                                   <ls_output_row>-vornr
                                   <ls_output_row>-werks
                                   'CMXS'
                                   <ls_output_row>-msg.
      ENDLOOP.
      RETURN.
  ENDTRY.

  " Create HTTP client
  cl_http_client=>create_by_destination(
    EXPORTING destination = lv_rfc
    IMPORTING client      = DATA(lo_http_client)
    EXCEPTIONS OTHERS     = 1 ).
  IF sy-subrc <> 0.
    LOOP AT gt_output ASSIGNING <ls_output_row>.
      <ls_output_row>-msg = 'HTTP client creation failed'.
      PERFORM f_write_log USING <ls_output_row>-aufnr
                                 <ls_output_row>-vornr
                                 <ls_output_row>-werks
                                 'CMXS'
                                 <ls_output_row>-msg.
    ENDLOOP.
    RETURN.
  ENDIF.

  " HTTP headers + body
  lo_http_client->request->set_header_field(
    name  = '~request_method' value = 'POST' ).
  lo_http_client->request->set_header_field(
    name  = 'Content-Type' value = lv_content ).
  lo_http_client->request->set_cdata( lv_payload ).

  " Send + receive
  TRY.
      lo_http_client->send( ).
      lo_http_client->receive( ).
    CATCH cx_root INTO DATA(lx_comm_error).
      LOOP AT gt_output ASSIGNING <ls_output_row>.
        <ls_output_row>-msg = |HTTP communication error: { lx_comm_error->get_text( ) }|.
        PERFORM f_write_log USING <ls_output_row>-aufnr
                                   <ls_output_row>-vornr
                                   <ls_output_row>-werks
                                   'CMXS'
                                   <ls_output_row>-msg.
      ENDLOOP.
      RETURN.
  ENDTRY.

  " Check status
  lo_http_client->response->get_status( IMPORTING code = lv_status ).
  WRITE lv_status TO lv_status_c.

  " Get response body (for debugging CPI errors)
  lv_response = lo_http_client->response->get_cdata( ).

  " Log results
  LOOP AT gt_output ASSIGNING <ls_output_row>.
    IF lv_status = 200.
      <ls_output_row>-msg = 'CPI success'.
    ELSE.
      <ls_output_row>-msg = |CPI error { lv_status_c }: { lv_response }|.
    ENDIF.

    PERFORM f_write_log USING <ls_output_row>-aufnr
                               <ls_output_row>-vornr
                               <ls_output_row>-werks
                               'CMXS'
                               <ls_output_row>-msg.
  ENDLOOP.

  COMMIT WORK.  " Ensure logs are saved
ENDFORM.

*---------------------------------------------------------------------*
* Write entry to ZCMX_RUN_LOG
*---------------------------------------------------------------------*
FORM f_write_log USING    pv_aufnr   TYPE aufnr
                          pv_vornr   TYPE vornr
                          pv_werks   TYPE werks_d
                          pv_stat    TYPE char20
                          pv_msg     TYPE char72.

  DATA: ls_log TYPE zcmx_run_log.

  CLEAR ls_log.
  CONCATENATE sy-datum sy-uzeit sy-uname INTO ls_log-logid.
  ls_log-mandt      = sy-mandt.
  ls_log-aufnr      = pv_aufnr.
  ls_log-vornr      = pv_vornr.
  ls_log-werks      = pv_werks.
  ls_log-stat       = pv_stat.
  ls_log-system_id  = sy-sysid.
  ls_log-run_date   = sy-datum.
  ls_log-run_time   = sy-uzeit.
  ls_log-msg        = pv_msg.
  ls_log-created_by = sy-uname.

  INSERT zcmx_run_log FROM ls_log.
ENDFORM.